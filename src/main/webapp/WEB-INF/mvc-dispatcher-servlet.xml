<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <mvc:annotation-driven/>
    <context:component-scan base-package="com.nnamdi.*"/>

    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix">
            <value>/WEB-INF/pages/</value>
        </property>
        <property name="suffix">
            <value>.jsp</value>
        </property>
    </bean>

<!--    Database Configurations -->
    <bean id="datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/employee_db?serverTimezone=UTC&amp;useLegacyDatetimeCode=false"/>
        <property name="username" value="root"/>
        <property name="password" value="nnamdI2k18#"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="datasource"/>
    </bean>

    <bean id="employeeDAOImpl" class="com.nnamdi.web.dao.EmployeeDAOImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>


<!--    Spring Security Configuration-->
    <security:http auto-config="true" use-expressions="true">
        <security:intercept-url pattern="/*" access="hasRole('ROLE_USER')"/>
        <security:csrf disabled="true"/>
    </security:http>

    <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <security:user name="user" password="$2a$10$lTF/jN38ypRkV43rbmvkeeeq0TfxZtyV4Rax5IGm5k6bSHXCezJe." authorities="ROLE_USER"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>

</beans>
<!--        url: jdbc:mysql://localhost:3306/test?serverTimezone=UTC&useLegacyDatetimeCode=false-->
<!--<context:component-scan> allows the spring container to search all the annotation under the package "com.nnamdi"-->
<!--<mvc:annotation-driven/> annotation will activate the @Controller, @RequestMapping, @Valid etc annotations.-->
<!--The <security:http> tag allows you to configure the Security Settings and access constraints for the web application. we have set the auto-config attribute as “true” this  gives you the basic security configuration.-->
<!--The <security:intercept-url> tag defines the pattern which will be matched against the URLs of the incoming requests, the access attribute validates the role which is required for accessing the URL. In our case all the incoming request will be validated, whether the user has the role ROLE_USER-->
<!--<security:authentication-provider> tag specifies type of authentication mechanism which will be used such as ldap, user, jdbc in our case it is user-service.
<security:user> tag provides the username and password. For our application, we have used the username as “user” and Password as “password” and the authority as “ROLE_USER”
DriverManagerDataSource – DriverManagerDataSource contains database related configurations such as driver class name, connection URL, username and password.
JdbcTemplate – We will be referencing the dataSource id (DriverManagerDataSource ) to the property dataSource of the JdbcTemplate class.
EmployeeDAOImpl – We will be referencing the jdbcTemplate id to the property jdbcTemplate of the EmployeeDAOImpl class.-->
